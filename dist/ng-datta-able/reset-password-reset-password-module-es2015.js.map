{"version":3,"sources":["./src/app/demo/pages/authentication/reset-password/reset-password.component.html","./src/app/demo/pages/authentication/reset-password/reset-password-routing.module.ts","./src/app/demo/pages/authentication/reset-password/reset-password.component.scss","./src/app/demo/pages/authentication/reset-password/reset-password.component.ts","./src/app/demo/pages/authentication/reset-password/reset-password.module.ts"],"names":[],"mappings":"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","file":"reset-password-reset-password-module-es2015.js","sourcesContent":["export default \"<div class=\\\"auth-wrapper\\\">\\n  <ngx-spinner \\n      [name]=\\\"'spinner1'\\\" \\n      [fullScreen]=\\\"true\\\" \\n      type=\\\"ball-clip-rotate-multiple\\\" \\n      size=\\\"medium\\\"\\n  >\\n  </ngx-spinner>\\n  <div class=\\\"auth-content\\\">\\n    <!-- <div class=\\\"auth-bg\\\">\\n      <span class=\\\"r\\\"></span>\\n      <span class=\\\"r s\\\"></span>\\n      <span class=\\\"r s\\\"></span>\\n      <span class=\\\"r\\\"></span>\\n    </div> -->\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-body text-center\\\">\\n        <div class=\\\"mb-4\\\">\\n          <!-- <i class=\\\"feather icon-unlock auth-icon\\\"></i> -->\\n          <img id=\\\"logo-image\\\" class=\\\"img-fluid img-rounded\\\" [src]=\\\"'assets/images/buds-logo.png'\\\" height=\\\"70\\\" width=\\\"70\\\" />\\n        </div>\\n        <h3 class=\\\"mb-4\\\">Reset Password</h3>\\n        <form [formGroup]=\\\"updatePasswordForm\\\" (ngSubmit)=\\\"onResetPasswordSubmit(updatePasswordForm)\\\" #myform=\\\"ngForm\\\" method=\\\"POST\\\">\\n          <div class=\\\"input-group mb-2\\\">\\n            <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\" required>\\n          </div>\\n          <div class=\\\"input-group mb-3 error-div\\\">\\n            <small *ngIf=\\\"updatePasswordForm.get('password').hasError('required') && myform.submitted\\\">Password Required</small>\\n            <small *ngIf=\\\"!updatePasswordForm.get('password').hasError('required') && updatePasswordForm.get('password').status === 'INVALID' && myform.submitted\\\">Enter a valid password address</small>\\n          </div>\\n\\n\\n          <div class=\\\"input-group mb-2\\\">\\n            <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirm_password\\\" required>\\n          </div>\\n          <div class=\\\"input-group mb-3 error-div\\\">\\n            <small *ngIf=\\\"updatePasswordForm.get('confirm_password').hasError('required') && myform.submitted\\\">Confirm Password Required</small>\\n            <small *ngIf=\\\"!updatePasswordForm.get('confirm_password').hasError('required') && updatePasswordForm.get('confirm_password').status === 'INVALID' && myform.submitted\\\">Enter a valid confirm_password address</small>\\n          </div>\\n\\n         \\n          <button class=\\\"btn btn-primary mb-4\\\">Submit</button>\\n        </form>\\n        \\n        <p class=\\\"mb-2 text-muted\\\">Do you already have account? <a [routerLink]=\\\"['/auth/signin']\\\">Sign in</a></p>\\n        <p class=\\\"mb-0 text-muted\\\">Donâ€™t have an account? <a [routerLink]=\\\"['/auth/signup']\\\">Sign up</a></p>\\n      \\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {ResetPasswordComponent} from './reset-password.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetPasswordComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ResetPasswordRoutingModule { }\n","export default \".error-div {\\n  color: red;\\n  background-color: white !important; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94MjMvRG9jdW1lbnRzL0dpdEh1Yi9kYmMtYnVkc2JhbmstYW5ndWxhci9zcmMvYXBwL2RlbW8vcGFnZXMvYXV0aGVudGljYXRpb24vcmVzZXQtcGFzc3dvcmQvcmVzZXQtcGFzc3dvcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxVQUFVO0VBQ1Ysa0NBQWtDLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9kZW1vL3BhZ2VzL2F1dGhlbnRpY2F0aW9uL3Jlc2V0LXBhc3N3b3JkL3Jlc2V0LXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmVycm9yLWRpdiB7XG4gICAgY29sb3I6IHJlZDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50O1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm ,FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../services/auth.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  public token : any;\n\nupdatePasswordForm = new FormGroup({\n    password: new FormControl(''),\n    confirm_password: new FormControl('')\n  })\n\n  constructor(private formBuilder: FormBuilder,\n    private auth: AuthService,\n    private router: Router,\n    private currentRoute: ActivatedRoute,\n    private spinner: NgxSpinnerService\n    ) { }\n\n  ngOnInit() {\n  \tthis.updatePasswordForm = this.formBuilder.group({\n      password: ['', [Validators.required]],\n      confirm_password: ['', [Validators.required]]\n    });\n  }\n\n  get password(){\n    return this.updatePasswordForm.get('password');\n  }\n  get confirm_password(){\n    return this.updatePasswordForm.get('confirm_password');\n  }\n\n  onResetPasswordSubmit() {\n    if (!this.updatePasswordForm.invalid){\n      this.showSpinner('spinner1');\n      //const token = this.currentRoute.params.value.id;\n      this.currentRoute.params.subscribe(params => { \n          console.log(params.id);\n          this.token = params.id;\n      });\n\n\n      const password = this.updatePasswordForm.get('password').value;\n      const confirm_password = this.updatePasswordForm.get('confirm_password').value;\n      console.log(password);\n      console.log(confirm_password);\n      this.auth.updateResetpassword(password, confirm_password, this.token).then(forgetResponse => { \n      \tconsole.log(forgetResponse);\n      \t//var getResponse = JSON.parse(forgetResponse);\n        if (forgetResponse['status'] === 200){\n          this.hideSpinner('spinner1');\n          swal.fire('Success', \"Password Reset Successfully\", 'success');\n           this.router.navigateByUrl('auth/signin');\n        }else{\n          this.hideSpinner('spinner1');\n          swal.fire('Error', `${forgetResponse['message']}`, 'error');\n        }\n        \n      })\n    }\n  }\n\n  showSpinner(name: string) { \n    this.spinner.show(name);\n  }\n\n  hideSpinner(name: string) {\n    this.spinner.hide(name);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { ResetPasswordRoutingModule } from './reset-password-routing.module';\nimport { ResetPasswordComponent } from './reset-password.component';\nimport { SweetAlert2Module } from '@sweetalert2/ngx-sweetalert2';\nimport { NgxSpinnerModule } from 'ngx-spinner';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ResetPasswordRoutingModule,\n    FormsModule, \n    ReactiveFormsModule,\n    SweetAlert2Module,\n    NgxSpinnerModule\n  ],\n  declarations: [ResetPasswordComponent]\n})\nexport class ResetPasswordModule { }\n"],"sourceRoot":"webpack:///"}