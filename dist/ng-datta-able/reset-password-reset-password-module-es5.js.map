{"version":3,"sources":["src/app/demo/pages/authentication/reset-password/reset-password.component.html","src/app/demo/pages/authentication/reset-password/reset-password-routing.module.ts","src/app/demo/pages/authentication/reset-password/reset-password.component.scss","src/app/demo/pages/authentication/reset-password/reset-password.component.ts","src/app/demo/pages/authentication/reset-password/reset-password.module.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"auth-wrapper\\\">\\n  <ngx-spinner \\n      [name]=\\\"'spinner1'\\\" \\n      [fullScreen]=\\\"true\\\" \\n      type=\\\"ball-clip-rotate-multiple\\\" \\n      size=\\\"medium\\\"\\n  >\\n  </ngx-spinner>\\n  <div class=\\\"auth-content\\\">\\n    <!-- <div class=\\\"auth-bg\\\">\\n      <span class=\\\"r\\\"></span>\\n      <span class=\\\"r s\\\"></span>\\n      <span class=\\\"r s\\\"></span>\\n      <span class=\\\"r\\\"></span>\\n    </div> -->\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-body text-center\\\">\\n        <div class=\\\"mb-4\\\">\\n          <!-- <i class=\\\"feather icon-unlock auth-icon\\\"></i> -->\\n          <img id=\\\"logo-image\\\" class=\\\"img-fluid img-rounded\\\" [src]=\\\"'assets/images/buds-logo.png'\\\" height=\\\"70\\\" width=\\\"70\\\" />\\n        </div>\\n        <h3 class=\\\"mb-4\\\">Reset Password</h3>\\n        <form [formGroup]=\\\"updatePasswordForm\\\" (ngSubmit)=\\\"onResetPasswordSubmit(updatePasswordForm)\\\" #myform=\\\"ngForm\\\" method=\\\"POST\\\">\\n          <div class=\\\"input-group mb-2\\\">\\n            <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\" required>\\n          </div>\\n          <div class=\\\"input-group mb-3 error-div\\\">\\n            <small *ngIf=\\\"updatePasswordForm.get('password').hasError('required') && myform.submitted\\\">Password Required</small>\\n            <small *ngIf=\\\"!updatePasswordForm.get('password').hasError('required') && updatePasswordForm.get('password').status === 'INVALID' && myform.submitted\\\">Enter a valid password address</small>\\n          </div>\\n\\n\\n          <div class=\\\"input-group mb-2\\\">\\n            <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirm_password\\\" required>\\n          </div>\\n          <div class=\\\"input-group mb-3 error-div\\\">\\n            <small *ngIf=\\\"updatePasswordForm.get('confirm_password').hasError('required') && myform.submitted\\\">Confirm Password Required</small>\\n            <small *ngIf=\\\"!updatePasswordForm.get('confirm_password').hasError('required') && updatePasswordForm.get('confirm_password').status === 'INVALID' && myform.submitted\\\">Enter a valid confirm_password address</small>\\n          </div>\\n\\n         \\n          <button class=\\\"btn btn-primary mb-4\\\">Submit</button>\\n        </form>\\n        \\n        <p class=\\\"mb-2 text-muted\\\">Do you already have account? <a [routerLink]=\\\"['/auth/signin']\\\">Sign in</a></p>\\n        <p class=\\\"mb-0 text-muted\\\">Donâ€™t have an account? <a [routerLink]=\\\"['/auth/signup']\\\">Sign up</a></p>\\n      \\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {ResetPasswordComponent} from './reset-password.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetPasswordComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ResetPasswordRoutingModule { }\n","export default \".error-div {\\n  color: red;\\n  background-color: white !important; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy94MjMvRG9jdW1lbnRzL0dpdEh1Yi9kYmMtYnVkc2JhbmstYW5ndWxhci9zcmMvYXBwL2RlbW8vcGFnZXMvYXV0aGVudGljYXRpb24vcmVzZXQtcGFzc3dvcmQvcmVzZXQtcGFzc3dvcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxVQUFVO0VBQ1Ysa0NBQWtDLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9kZW1vL3BhZ2VzL2F1dGhlbnRpY2F0aW9uL3Jlc2V0LXBhc3N3b3JkL3Jlc2V0LXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmVycm9yLWRpdiB7XG4gICAgY29sb3I6IHJlZDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50O1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm ,FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../services/auth.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  public token : any;\n\nupdatePasswordForm = new FormGroup({\n    password: new FormControl(''),\n    confirm_password: new FormControl('')\n  })\n\n  constructor(private formBuilder: FormBuilder,\n    private auth: AuthService,\n    private router: Router,\n    private currentRoute: ActivatedRoute,\n    private spinner: NgxSpinnerService\n    ) { }\n\n  ngOnInit() {\n  \tthis.updatePasswordForm = this.formBuilder.group({\n      password: ['', [Validators.required]],\n      confirm_password: ['', [Validators.required]]\n    });\n  }\n\n  get password(){\n    return this.updatePasswordForm.get('password');\n  }\n  get confirm_password(){\n    return this.updatePasswordForm.get('confirm_password');\n  }\n\n  onResetPasswordSubmit() {\n    if (!this.updatePasswordForm.invalid){\n      this.showSpinner('spinner1');\n      //const token = this.currentRoute.params.value.id;\n      this.currentRoute.params.subscribe(params => { \n          console.log(params.id);\n          this.token = params.id;\n      });\n\n\n      const password = this.updatePasswordForm.get('password').value;\n      const confirm_password = this.updatePasswordForm.get('confirm_password').value;\n      console.log(password);\n      console.log(confirm_password);\n      this.auth.updateResetpassword(password, confirm_password, this.token).then(forgetResponse => { \n      \tconsole.log(forgetResponse);\n      \t//var getResponse = JSON.parse(forgetResponse);\n        if (forgetResponse['status'] === 200){\n          this.hideSpinner('spinner1');\n          swal.fire('Success', \"Password Reset Successfully\", 'success');\n           this.router.navigateByUrl('auth/signin');\n        }else{\n          this.hideSpinner('spinner1');\n          swal.fire('Error', `${forgetResponse['message']}`, 'error');\n        }\n        \n      })\n    }\n  }\n\n  showSpinner(name: string) { \n    this.spinner.show(name);\n  }\n\n  hideSpinner(name: string) {\n    this.spinner.hide(name);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { ResetPasswordRoutingModule } from './reset-password-routing.module';\nimport { ResetPasswordComponent } from './reset-password.component';\nimport { SweetAlert2Module } from '@sweetalert2/ngx-sweetalert2';\nimport { NgxSpinnerModule } from 'ngx-spinner';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ResetPasswordRoutingModule,\n    FormsModule, \n    ReactiveFormsModule,\n    SweetAlert2Module,\n    NgxSpinnerModule\n  ],\n  declarations: [ResetPasswordComponent]\n})\nexport class ResetPasswordModule { }\n"],"sourceRoot":"webpack:///","file":"reset-password-reset-password-module-es5.js"}